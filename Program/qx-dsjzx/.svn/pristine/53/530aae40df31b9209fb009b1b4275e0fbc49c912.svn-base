using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using ProblemDisposal.Common.Basic;
using System.Threading.Tasks;
using SqlSugar;
using Microsoft.Data.SqlClient;
using MySql.Data.MySqlClient;
using MySqlX.XDevAPI.Common;
using System;
using ProgramsNetCore.Models.Dto.DataMigration;
using ProgramsNetCore.Common.EncryptionToDecrypt;
using ProgramsNetCore.IService;
using AutoMapper;
using Models;
using System.Linq;
using ProgramsNetCore.Common.Basic;
using System.Collections.Generic;
using Microsoft.VisualBasic;
using System.Data;
using DbType = SqlSugar.DbType;
using ProgramsNetCore.Common;
using System.IO;
using Microsoft.AspNetCore.Rewrite;
using ProgramsNetCore.Models.Dto.DataSecurity;
using ResultDeptInfoDto = ProgramsNetCore.Models.Dto.DataMigration.ResultDeptInfoDto;
using NPOI.HPSF;
using System.Net.Mail;
using System.Text.Encodings.Web;
using System.Text;
using System.Security.Claims;
using NPOI.SS.Formula.Functions;
using ProgramsNetCore.Models.Dto.DataMigrationDto;

namespace DataSharing.Controllers
{

    /// <summary>
    /// 数据迁移
    /// </summary>
    [Route("")]
    [ApiController]
    public class DataMigrationController : ControllerBase
    {
        private readonly IPublicTaskService _ptService;
        private readonly IDataMigrationService _dmService;
        private readonly IMapper _map;
        private readonly IDataMigrationChildValueService _dmcvService;
        private readonly IProcessService _processService;
        private readonly IDataTableService _dtService;
        private readonly IDataExprotTaskInfoService _detiService;
        private readonly IAttachedMenuService _amService;
        private readonly IDataMapService _datamapService;
        private readonly IDataTrendService _datatrendService;

        public DataMigrationController(IPublicTaskService ptService,IDataMigrationService dmService,IMapper map,IDataMigrationChildValueService dmcvService,IProcessService processService,IDataTableService dtService,IDataExprotTaskInfoService detiService,IAttachedMenuService amService,IDataMapService datamapService,IDataTrendService datatrendService)
        {
            _ptService = ptService;
            _dmService = dmService;
            _map = map;
            _dmcvService = dmcvService;
            _processService = processService;
            _dtService = dtService;
            _detiService = detiService;
            _amService = amService;
            _datamapService = datamapService;
            _datatrendService = datatrendService;
        }

        /// <summary>
        /// 测试链接
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<AjaxResult<bool>> TestConnection(TestConnInfoDto dto)
        {
            var result =await Task.Factory.StartNew( () => {
                try
                {
                    var DecryptKey = "qx" + dto.Key;
                    //dto.DBHost=DEncrypt.AesDecrypt(dto.DBHost,DecryptKey);
                    //dto.UserName = DEncrypt.AesDecrypt(dto.UserName, DecryptKey);
                    Console.WriteLine(DateTime.Now.ToString("hh:mm:ss"));
                    dto.Passwrod = DEncrypt.AesDecryptECB(dto.Passwrod, DecryptKey);
                    Console.WriteLine(DateTime.Now.ToString("hh:mm:ss"));
                    //dto.DataBase = DEncrypt.AesDecrypt(dto.DataBase, DecryptKey);
                    DbType myDbType = new DbType();
                    string strConn = "";
                    switch (dto.DBType)
                    {
                        case 0:myDbType = DbType.MySql; strConn = $" server={dto.DBHost};Database={dto.DataBase};Uid={dto.UserName};Pwd={dto.Passwrod};Port={dto.Port};AllowLoadLocalInfile=true"; break;
                        case 1:myDbType = DbType.SqlServer; strConn = $"server={(dto.DBHost.Contains(',')?dto.DBHost:dto.DBHost+","+dto.Port)};uid={dto.UserName};pwd={dto.Passwrod};database={dto.DataBase}"; break;
                        case 7:myDbType=DbType.Oracle; strConn = $"Data Source={dto.DBHost}/orcl;User ID={dto.UserName};Password={dto.DataBase}"; break;
                        case 5:myDbType = DbType.Dm; strConn = $"Server={dto.DBHost}; User Id={dto.UserName}; PWD={dto.Passwrod};DATABASE={dto.DataBase}"; break;
                        case 6:myDbType = DbType.Kdbndp; strConn = $"Server={dto.DBHost};Port={dto.Port};UID={dto.UserName};PWD={dto.Passwrod};database={dto.DataBase}"; break;
                    }
                    SqlSugarClient db = new SqlSugarClient(new ConnectionConfig()
                    {
                        ConnectionString = strConn,//连接符字串
                        DbType = myDbType, //数据库类型
                        IsAutoCloseConnection = true ,//不设成true要手动close
                    
                    });
                   
                db.Open(); 
                    
                    return new AjaxResult<bool>(true, "连接成功！");
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    return new AjaxResult<bool>(false, "连接失败！");
                }
            });

            return result;
        }

        /// <summary>
        /// 提交互导申请
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<AjaxResult<string>> SubmitApplication(DataMigrationInfoDto dto)
        {
            //根据中文匹配数据库中相应用户/部门Id

         var userinfo= HttpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userinfo)) return new AjaxResult<string>(false, "认证失败，请重新登录");

            string usersql = $" select cu.id,real_name,co.id departmentid ,co.Title from cloud_user cu join cloud_org co on co.id=cu.description where cu.id={userinfo} ";
            var info = await _dtService.GetEntity<GetContextUserInfoDto>(usersql);
            //if (userid == null || dept == null) return new AjaxResult<string>(false, "申请人或者部门不存在！");
            
            ////映射互导申请信息并插入
            var insertDm = _map.Map<datamigrationtaskinfo>(dto);
            insertDm.Applicant = info.Id;
            insertDm.Department = info.DepartmentId.ToInt32();
         var resultId= await _dmService.IdAdd(insertDm);
            //判断导出结构为表还是库 为表记录表
            if ((dto.ExportType == 2 || dto.ExportType == 4) && dto.ExportObj != null && dto.ExportObj.Count > 0)
            {
               await _dmcvService.Adds(dto.ExportObj.Select(i => new datamigrationtaskinfochildvalue { Parent_ID=resultId, ExprotValue=i.ToString() }).ToList());
            }
          
            var resultptId = await _ptService.IdAdd(new public_task { StartTime = DateTime.Now, Status = 0, TaskType =2 });

            //添加导出申请
            var reusltprocessid=  await _processService.IdAdd(new process { TaskId=resultptId, UserId=  info.Id, Accessory=dto.Accessory,Status=1,Describe="等待审批" });
            ////添加申请审批
            //var reusltprocessid = await _processService.IdAdd(new process { TaskId = resultptId, Status = 0, Describe = "审批" });
            await _ptService.UpdateColumn(new public_task { Id = resultptId, CurrentProcess = reusltprocessid, InfoRelation=resultId,Status=1 }, i => new {  i.CurrentProcess,i.InfoRelation,i.Status });
            return new AjaxResult<string>();
        }

        /// <summary>
        /// 获取数据迁移列表
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<PageResult<List<ResultDataMigrationListDto>>> GetPageDataMigrationList(DataMigrationListDto dto)
        {
            string sql = $"";

            if (dto.OperationType == 1)
            {
                sql += $" select pt.id ,dtm.Name TableNameCN,dtm.EnName TableName,dtm.GUID,cu.real_name Applicant ,co.Title Department ,{(dto.Status==2? "pt.EndTime" : "pt.StartTime")}  createtime,modi.`Name` Modifier,la.`Name` Layered,p.`Describe` Process  from public_task pt  join dataexprottaskinfo  dpinfo on dpinfo.id=pt.inforelation join datamap  dtm on dtm.id=dpinfo.AssociativeTable join modified modi on modi.id=dtm.ModifierType  join layered la on la.id=dtm.LayeredType  join process p on p.id=pt.CurrentProcess left join cloud_user cu on cu.id=dpinfo.UserId left join cloud_org co on co.id=dpinfo.Department  where 1=1 ";
            }
            else
            {
                sql += $" select pt.id ,dpinfo.TargetName_cn TableNameCn,'' GUID,cu.real_name Applicant ,co.Title Department ,pt.StartTime createtime,modi.`Name` Modifier,'' Layered,p.`Describe` Process,dpinfo.isimplement  from public_task pt join datamigrationtaskinfo  dpinfo on dpinfo.id=pt.inforelation   join process p on p.id=pt.CurrentProcess left join cloud_user cu on cu.id=dpinfo.Applicant left join cloud_org co on co.id=dpinfo.Department left join modified modi on modi.id=dpinfo.ModifierType where 1=1";
            }
            string sqlwhere = "";
            if(dto.OperationType.HasValue)sqlwhere += $" and TaskType={dto.OperationType}  ";
            if(dto.Status.HasValue)sqlwhere += $" and pt.Status={dto.Status} ";
            sql += sqlwhere;
            RefAsync<int> total = 0;
            var result = await _dtService.GetEntityPageList<ResultDataMigrationListDto>(sql,dto.PageIndex,dto.PageSize,total);
            return new PageResult<List<ResultDataMigrationListDto>>(result, total);

        }

        /// <summary>
        /// 数据审批
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<AjaxResult<string>> DataMigrationApproval(ApprovalDto dto)
        {
            if (dto.DataId == null || dto.DataId.Count <= 0) return new AjaxResult<string>(false, "数据错误！");
            var result = await await Task.Factory.StartNew(async () =>
            {
                bool IsExists=false;
                foreach (var item in dto.DataId)
                {
                    var resultData = await _ptService.GetEntity(i => i.Id == item);
                    if (resultData == null)
                    {
                        IsExists = false;
                        break;
                    }
                    else IsExists = true;
                    //var endProcess = await _processService.GetEntity(i => i.Id == resultData.CurrentProcess.Value);
                    var reusltprocessid = await _processService.IdAdd(new process { TaskId = resultData.Id, Status = 1, Describe =dto.ApprovalType==2? "已审批":"已驳回" });
                    //await _processService.UpdateColumn(new process { Id = endProcess.Id, Status = dto.State, UserId = dto.UserID, Accessory=dto.Accessory, CreateTime=DateTime.Now }, i => new { i.Status, i.UserId });
                    await _ptService.UpdateColumn(new public_task { Id = item, EndTime = DateTime.Now, Status = dto.State,CurrentProcess=reusltprocessid }, i =>new  { i.EndTime,i.Status,i.CurrentProcess });
                }
                return IsExists;
            });
            return new AjaxResult<string>(result);
        }


        /// <summary>
        /// 加入申请车
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<AjaxResult<string>> JoinApplyCar(JoinApplyCarDto dto)
        {
            if (dto.DataId == null || dto.DataId.Count <= 0) return new AjaxResult<string>(false, "数据出现错误！");
            var result = await await Task.Factory.StartNew(async () => {
                bool isExists = false;
                foreach (var item in dto.DataId)
                {
                        var resultid = await _detiService.IdAdd(new dataexprottaskinfo { UserId = dto.UserId, Department = dto.Department, AssociativeTable = item });
                        var resulttaskid = await _ptService.IdAdd(new public_task { StartTime = DateTime.Now, InfoRelation = resultid, Status = 0, TaskType = 1 });
                        //添加导出申请
                        var resultprocessid = await _processService.IdAdd(new process { TaskId = resulttaskid, UserId = dto.UserId, Status = 1, Describe = "添加申请车", CreateTime = DateTime.Now });
                        isExists = (await _ptService.UpdateColumn(new public_task { Id = resulttaskid, CurrentProcess = resultprocessid }, i => new { i.CurrentProcess })) > 0;                 
                }
                return isExists;
            });
            return new AjaxResult<string>(result);
        }

        /// <summary>
        /// 提交购物车申请
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<AjaxResult<string>> AppliyCarCompleted(SubmitApplyDto dto)
        {
            if (dto.TaskId == null || dto.TaskId.Count <= 0) return new AjaxResult<string>(false, "数据出现错误！");
            var resultdetermine = await await Task.Factory.StartNew(async () =>
            {
                var entity = await _ptService.GetEntitys(i => i.TaskType == 1 && i.Status == 0);
                return entity.Select(i => i.Id).Intersect(dto.TaskId).Count() == dto.TaskId.Count;
            });
            if (!resultdetermine) return new AjaxResult<string>(false, "数据错误");
            var result = await Task.Factory.StartNew(async () => {

                foreach (var item in dto.TaskId)
                {
                    var entitypt = await _ptService.GetEntity(i => i.Id == item);
                    var entitydeti = await _detiService.GetEntity(i => i.Id == entitypt.InfoRelation);
                    var reusltprocessid = await _processService.IdAdd(new process { Status=1, CreateTime=DateTime.Now, TaskId=entitypt.Id, UserId=entitydeti.UserId, Describe= "导出申请" });
                    //添加申请审批
                  //  var reusltprocessid = await _processService.IdAdd(new process { TaskId = entitypt.Id, Status = 0, Describe = "审批" });
                    await _ptService.UpdateColumn(new public_task { Id = entitypt.Id, CurrentProcess = reusltprocessid,Status=1 }, i => new { i.CurrentProcess,i.Status });
                }
            });
            return new AjaxResult<string>();
        }

        /// <summary>
        /// 导出Excel
        /// </summary>
        /// <param name="taskId">任务Id</param>
        /// <returns></returns>
        [HttpGet]
        public async Task<IActionResult> ExportExcelAsync(int taskId)
        {
            var userid = HttpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userid)) return Ok("认证失败，请登录");
            var resultdetermine = await await Task.Factory.StartNew(async () =>
            {
                var entitypt = await _ptService.GetEntitys(i => i.TaskType == 1 && i.Status == 2&&taskId==i.Id);
                return entitypt.Count>0;
            });
            if (!resultdetermine) return Ok("流程错误");

            var result = await await Task.Factory.StartNew(async () =>
            {
                var path = AppContext.BaseDirectory;
                string getdatainfo = $"select dt.id,dt.GUID,dt.AssociativeTable,dt.Name TableName,st.id SecretId,st.SecretStatus,st.SecretEncode,st.SecretType,st.StartTime,st.EndTime,st.SecretMode,dt.isdataservice from  public_task pt join dataexprottaskinfo deti on deti.id=pt.InfoRelation join datamap  dt on dt.id=deti.AssociativeTable left join secret st on st.MapId=dt.Id where pt.id in ({taskId})";
                var resultEntitys = await _dtService.GetEntity<ResultSecretDataInfoDto>(getdatainfo);
                string key = "";
                var dt = await _dtService.GetDataTable($"select * from {(resultEntitys.IsDataService.HasValue? "data_sharing_main" : "data_sharing_affiliated")}.{resultEntitys.AssociativeTable} where 1=1");
                await _datatrendService.Add(new datatrend { CreateTime=DateTime.Now, DataMapId=resultEntitys.Id, AffectedRows=dt.Rows.Count,  Type=1, UserId=userid.ToInt32() });
                key = resultEntitys.SecretMode == 1 ? resultEntitys.SecretEncode : "qx123456";
                if (resultEntitys.StartTime != null&&resultEntitys.EndTime > DateTime.Now )
                {
                    //字段加密
                    if (resultEntitys.SecretType == 1)
                    {
                        var dtkey = await _dtService.GetDataTable($" select Secretkey from secret_child where parent_id={resultEntitys.SecretId} ");
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtkey.Rows.Count; j++)
                            {
                                dt.Rows[i][dtkey.Rows[j][0] as string] = DEncrypt.Encrypt(dt.Rows[i][dtkey.Rows[j][0] as string] as string, key);
                            }
                        }
                    }
                    //表加密
                    else if (resultEntitys.SecretType == 2)
                    {
                        for (int i = 0; i < dt.Columns.Count; i++)
                        {
                            if (dt.Columns[i].DataType.Name == "String")
                            {
                                for (int j = 0; j < dt.Rows.Count; j++)
                                {
                                    dt.Rows[j][i] = DEncrypt.Encrypt(dt.Rows[j][i] as string, key);
                                }
                            }
                        }
                    }
                    //未加密
                    else if (resultEntitys.SecretType == null)
                    {

                    }
                }

                var filepath = path + @"ExprotExcel\";
                if (!System.IO.Directory.Exists(filepath))
                {
                    Directory.CreateDirectory(filepath);
                }
                filepath += resultEntitys.AssociativeTable + ".xls";
                if (System.IO.File.Exists(filepath))
                    System.IO.File.Delete(filepath);
                var exprotexcel = await PublicFunction.DataTableToExcelAsync(dt, resultEntitys.TableName);

                return File(exprotexcel.ToArray(), "application/octet-stream",resultEntitys.TableName+".xls");

            });

            return result;
            //FileStream fs = new FileStream(filepath, FileMode.Create, FileAccess.Write);
            //fs.Write(buf, 0, buf.Length);
            //fs.Flush();
            //fs.Close();


        }

        /// <summary>
        /// 获取数源部门信息
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public async Task<AjaxResult<List<ResultDbDeptInfoDto>>> GetDBDept()
        {
            string sql = "select DISTINCT co.id, co.Attribution departmentname from datamap   join attribution co on co.Id = datamap.Attribution";
            var result = await _dtService.GetEntityList<ResultDbDeptInfoDto>(sql);
            return new AjaxResult<List<ResultDbDeptInfoDto>>(result);
        }
        /// <summary>
        /// 根据部门id获取数据表
        /// </summary>
        /// <param name="deptId"></param>
        /// <returns></returns>
        [HttpGet]
        public async Task<AjaxResult<List<ResultDeptInfoDto>>> GetDeptTableName(int deptId)
        {
            var sql = $"select dt.id,dt.name TableName  from datamap dt where 1=1 and attribution={deptId} ";
            var result = await _dtService.GetEntityList<ResultDeptInfoDto>(sql);
            return new AjaxResult<List<ResultDeptInfoDto>>(result);
        }
        /// <summary>
        /// 删除购物车项
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<AjaxResult<string>> DeleteShoppingCart(DeleteShoppingCartDto dto)
        {
            if (dto.TaskId == null || dto.TaskId.Count < 0) return new AjaxResult<string>(false, "数据错误");
            var result =await _ptService.Deletes(dto.TaskId.ToArray());
            return new AjaxResult<string>(result);
        }


        /// <summary>
        /// 分页获取数据表数据
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<AjaxResult<ResultDataInfoPageDto>> GetDataInfoPage(GetDataInfoPageDto dto)
        {

            var authorizesql = $"select Id from authority where ( RelevanceId=( select `description` from cloud_user where id={dto.UserId}) or RelevanceId={dto.UserId}) and AssociativeTable={dto.DataId} ";
            if (dto.IsChild)
            {
                authorizesql += $" and ischild=1  union select id from authority where ( RelevanceId=( select `description` from cloud_user where id={dto.UserId}) or RelevanceId={dto.UserId}) and AssociativeTable=( select dm.ID from datamap_child dmc join datamap dm on dm.id=dmc.ParentId where dmc.id={dto.DataId} )";
            }
            var authorizeList = await _dtService.GetEntityList<ResultIdCountDto>(authorizesql);
            var datamapentity = await _datamapService.GetEntity(i => i.Id == dto.DataId&&dto.UserId==i.UserId);
            if (datamapentity==null&&(authorizeList == null || authorizeList.Count <= 0)) return new AjaxResult<ResultDataInfoPageDto>(false,"无权限，请先申请权限！");
            string getdatainfo = "";
            if (dto.IsChild) {
                 getdatainfo = $"select dt.id,dt.GUID,dmc.MappingTable AssociativeTable,dt.Name TableName,st.id SecretId,st.SecretStatus,st.SecretEncode,st.SecretType,st.StartTime,st.EndTime,st.SecretMode,dt.isdataservice from  datamap_child dmc join   datamap  dt on dt.id=dmc.parentid  left join secret st on st.MapId=dt.Id where dmc.Id = {dto.DataId}";
            } else
            {
                 getdatainfo = $"select dt.id,dt.GUID,dt.AssociativeTable,dt.Name TableName,st.id SecretId,st.SecretStatus,st.SecretEncode,st.SecretType,st.StartTime,st.EndTime,st.SecretMode,dt.isdataservice from   datamap  dt  left join secret st on st.MapId=dt.Id where dt.Id = {dto.DataId}";
            }
            var resultEntitys = await _dtService.GetEntity<ResultSecretDataInfoDto>(getdatainfo);
            if (resultEntitys == null || resultEntitys.AssociativeTable.Equals(string.Empty)) return new AjaxResult<ResultDataInfoPageDto>(false,"数据错误！");
            string key = "";
            RefAsync<int> total = 0;
            var dt = await _dtService.GetDataTable($"select * from {(resultEntitys.IsDataService.HasValue? "data_sharing_main" : "data_sharing_affiliated")}.{resultEntitys.AssociativeTable} where 1=1 {(string.IsNullOrEmpty(dto.Conditions) ? "" : $" and {dto.Conditions} ")}",dto.PageIndex,dto.PageSize,total);
            key = resultEntitys.SecretMode == 1 ? resultEntitys.SecretEncode : "qx123456";
            var result = await await Task.Factory.StartNew(async () => {

                if (resultEntitys.StartTime == null || resultEntitys.EndTime < DateTime.Now )
                {
                    //字段加密
                    if (resultEntitys.SecretType == 1)
                    {
                        var dtkey = await _dtService.GetDataTable($" select Secretkey from secret_child where parent_id={resultEntitys.SecretId} ");
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            for (int j = 0; j < dtkey.Rows.Count; j++)
                            {
                                dt.Rows[i][dtkey.Rows[j][0] as string] = DEncrypt.Encrypt(dt.Rows[i][dtkey.Rows[j][0] as string] as string, key);
                            }
                        }
                    }
                    //表加密
                    else if (resultEntitys.SecretType == 2)
                    {
                        for (int i = 0; i < dt.Columns.Count; i++)
                        {
                            if (dt.Columns[i].DataType.Name == "String")
                            {
                                for (int j = 0; j < dt.Rows.Count; j++)
                                {
                                    dt.Rows[j][i] = DEncrypt.Encrypt(dt.Rows[j][i] as string, key);
                                }
                            }
                        }
                    }
                    //未加密
                    else if (resultEntitys.SecretType == null)
                    {

                    }
                }
                return dt;
            });
            var dicResult = await _dtService.GetDataTable($"select CnFieldName,EnFieldName from {(resultEntitys.IsDataService.HasValue ? "data_sharing_main" : "data_sharing_affiliated")}.dic_{resultEntitys.AssociativeTable} where 1=1 ");
            return new AjaxResult<ResultDataInfoPageDto>(new ResultDataInfoPageDto { DicTable = dicResult, Table = result, Total=total });

        }

        /// <summary>
        /// 获取迁移申请信息
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<PageResult<List<ResultTransconductanceApplicationDto>>> GetTransconductanceApplicationInfo(GetMigrationApprovalDto dto)
        {
            if (dto.Id == null || dto.Id.Count <= 0) return new PageResult<List<ResultTransconductanceApplicationDto>>(null, 0);
            string ids = "";
            dto.Id.ForEach(i => ids += i + ",");
            ids = ids.TrimEnd(',');
            RefAsync<int> total = 0;
            string sql = $"select dtm.id DataId ,dtm.Name TableNameCN,dtm.EnName TableName,dtm.GUID,cu.real_name Applicant ,co.Title Department ,modi.`Name` Modifier from  datamap  dtm  join modified modi on modi.id=dtm.ModifierType  left join cloud_user cu on cu.id=dtm.UserId left join cloud_org co on co.id=dtm.Attribution where dtm.id in({ids}) ";
            var result = await _dtService.GetEntityPageList<ResultTransconductanceApplicationDto>(sql, dto.PageIndex, dto.PageSize, total);
            return new PageResult<List<ResultTransconductanceApplicationDto>>(result, total);
        }


        /// <summary>
        /// 催办
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<AjaxResult<string>> GetHasten(AddHastenInfoDto dto)
        {
            var result = await _amService.Adds(dto.TaskId.Select(i => new attachedmenu { EndTime = dto.EndTime, StartTime = dto.StartTime, TaskId = i, Type = 1, UserId = dto.UserId }).ToList());
            return new AjaxResult<string>(result>0);
        }

        ///// <summary>
        ///// 执行互导任务
        ///// </summary>
        ///// <param name="taskid"></param>
        ///// <returns></returns>
        //[HttpGet]
        //public async Task<AjaxResult<string>> ExecuteTask(int taskid)
        //{

        //    var taskentity = await _ptService.GetEntity(i => i.Id == taskid);
        //    if (taskentity == null) return new AjaxResult<string>(false, "数据错误");
        //    var dpinfo = await _dmService.GetEntity(i => i.Id == taskentity.InfoRelation.Value);
        //    if (dpinfo == null) return new AjaxResult<string>(false, "数据错误");
        //    var result = await Task.Factory.StartNew(() =>
        //    {
        //        try
        //        {


        //            var DecryptKey = "qx" + dpinfo.SecretKey;
        //            //dto.DBHost=DEncrypt.AesDecrypt(dto.DBHost,DecryptKey);
        //            //dto.UserName = DEncrypt.AesDecrypt(dto.UserName, DecryptKey);

        //            dpinfo.DbPwd = DEncrypt.AesDecryptECB(dpinfo.DbPwd, DecryptKey);

        //            //dto.DataBase = DEncrypt.AesDecrypt(dto.DataBase, DecryptKey);
        //            DbType myDbType = new DbType();
        //            string strConn = "";
        //            switch (dpinfo.DbType)
        //            {
        //                case 0: myDbType = DbType.MySql; strConn = $" server={dpinfo.HostLink};Database={dpinfo};Uid={dpinfo.DbName};Pwd={dpinfo.DbPwd};Port={dpinfo.};AllowLoadLocalInfile=true"; break;
        //                case 1: myDbType = DbType.SqlServer; strConn = $"server={(dto.DBHost.Contains(',') ? dto.DBHost : dto.DBHost + "," + dto.Port)};uid={dto.UserName};pwd={dto.Passwrod};database={dto.DataBase}"; break;
        //                case 7: myDbType = DbType.Oracle; strConn = $"Data Source={dto.DBHost}/orcl;User ID={dto.UserName};Password={dto.DataBase}"; break;
        //                case 5: myDbType = DbType.Dm; strConn = $"Server={dto.DBHost}; User Id={dto.UserName}; PWD={dto.Passwrod};DATABASE={dto.DataBase}"; break;
        //                case 6: myDbType = DbType.Kdbndp; strConn = $"Server={dto.DBHost};Port={dto.Port};UID={dto.UserName};PWD={dto.Passwrod};database={dto.DataBase}"; break;
        //            }
        //            SqlSugarClient db = new SqlSugarClient(new ConnectionConfig()
        //            {
        //                ConnectionString = strConn,//连接符字串
        //                DbType = myDbType, //数据库类型
        //                IsAutoCloseConnection = true,//不设成true要手动close

        //            });

        //            db.Open();

        //            return new AjaxResult<bool>(true, "连接成功！");
        //        }
        //        catch (Exception ex)
        //        {
        //            Console.WriteLine(ex.Message);
        //            return new AjaxResult<bool>(false, "连接失败！");
        //        }
        //    });
        //    return null;
        //}
    }
}
